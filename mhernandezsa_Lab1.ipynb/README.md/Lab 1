{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "mhernandezsa_Lab1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMHV/IUpqYVAQHUI4bqKfQt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mhernandezsa/MetNumUN2022II/blob/main/mhernandezsa_Lab1.ipynb/README.md/Lab%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "INTRODUCTION TO RESEARCH"
      ],
      "metadata": {
        "id": "hv1soFDvmjlv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 1 - Executing a Command"
      ],
      "metadata": {
        "id": "U9W5V36FI9Ar"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "395985*2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ws8ie-grI9LG",
        "outputId": "9811920b-5689-475d-e244-b08ca9e50381"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "791970"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 2 "
      ],
      "metadata": {
        "id": "T7tyMpogKNuC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x=2.6"
      ],
      "metadata": {
        "id": "7Bag9YnuKYza"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 3"
      ],
      "metadata": {
        "id": "onUJpN9ZKdTu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "2.6+3.88\n",
        "5/7"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yxpzv3ucKgHk",
        "outputId": "00929605-f990-4575-c535-8ff503ad6825"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7142857142857143"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "2.6+3.88\n",
        "5/7\n",
        "print(2.6+3.88)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RFh5QbtMKqlq",
        "outputId": "4abde7f4-a94a-494e-f51e-7e1187e3c21d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6.48\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "My own example 4 - Importing Libraries"
      ],
      "metadata": {
        "id": "_-VkjtXCLJI8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf"
      ],
      "metadata": {
        "id": "R548LOveLWBT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 5 - Getting Documentation Help"
      ],
      "metadata": {
        "id": "Atwh7urpLjy0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tf.nn.softmax_cross_entropy_with_logits?"
      ],
      "metadata": {
        "id": "Pd_c87o8LqdN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 6 - Sampling"
      ],
      "metadata": {
        "id": "UFJwttikNHPK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "z=np.random.normal(0,50,10)\n",
        "z"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vp1QN754NNur",
        "outputId": "312afe5d-26e1-49b0-9039-57fa08fec8fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 30.68342414,  56.27204282, -59.20530355, -42.68687824,\n",
              "       -12.01857385,  76.79629845, -16.44981978,   9.70268064,\n",
              "        43.74444643, -27.03857922])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 7 - Plotting"
      ],
      "metadata": {
        "id": "kj3vqmZgOU_F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "auGaxyPHOaWh",
        "outputId": "df4cd3ec-32f9-493b-8530-5b527a1e9a50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fb95f6d7110>]"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 8 - Squelching Line Output"
      ],
      "metadata": {
        "id": "F3dGGd5oO8Kt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(z);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "ts66wWpwPf8c",
        "outputId": "106c8835-c2ba-4041-d5f0-d9830860033d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 9 - Adding Axis Labels"
      ],
      "metadata": {
        "id": "yPduLXEsPuhj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(z);\n",
        "plt.xlabel('Tiempo')\n",
        "plt.ylabel('Cantidad')\n",
        "plt.legend(['A']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "ZQtzmO1qP1s-",
        "outputId": "5f6cfb9e-a68c-407f-8d6f-ea80e959fe0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 10 - Generating statistics"
      ],
      "metadata": {
        "id": "7OfNYYXNRJ9C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ipyqem2RO12",
        "outputId": "1b5e8edb-975c-4d8b-b713-4a022ff1e34e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.979973784399168"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 11 - Getting Real Pricing Data"
      ],
      "metadata": {
        "id": "gdxqbRHqRflF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yfinance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C1HnvYjXRpx-",
        "outputId": "fc5bcbc3-3c8b-43f4-a4d4-0e0f5b4fcddf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting yfinance\n",
            "  Downloading yfinance-0.1.74-py2.py3-none-any.whl (27 kB)\n",
            "Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.3.5)\n",
            "Collecting requests>=2.26\n",
            "  Downloading requests-2.28.1-py3-none-any.whl (62 kB)\n",
            "\u001b[K     |████████████████████████████████| 62 kB 1.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.21.6)\n",
            "Requirement already satisfied: lxml>=4.5.1 in /usr/local/lib/python3.7/dist-packages (from yfinance) (4.9.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2022.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24.0->yfinance) (1.15.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2022.6.15)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.10)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (1.24.3)\n",
            "Requirement already satisfied: charset-normalizer<3,>=2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.1.0)\n",
            "Installing collected packages: requests, yfinance\n",
            "  Attempting uninstall: requests\n",
            "    Found existing installation: requests 2.23.0\n",
            "    Uninstalling requests-2.23.0:\n",
            "      Successfully uninstalled requests-2.23.0\n",
            "Successfully installed requests-2.28.1 yfinance-0.1.74\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "yf.download?"
      ],
      "metadata": {
        "id": "nzZlgWTGSlM-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datos = yf.download(\"NOK\", start=\"2021-1-1\", end=\"2022-1-1\")\n",
        "datos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ta-4MRjTS3_M",
        "outputId": "b6c29f88-af80-47b4-b04f-277fb8d159f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Open  High   Low  Close  Adj Close    Volume\n",
              "Date                                                    \n",
              "2021-01-04  3.99  3.99  3.85   3.89   3.873792  30281400\n",
              "2021-01-05  3.99  4.06  3.95   4.04   4.023167  38446200\n",
              "2021-01-06  4.01  4.09  4.01   4.04   4.023167  37467400\n",
              "2021-01-07  4.01  4.03  3.97   3.99   3.973375  25318000\n",
              "2021-01-08  3.94  3.96  3.90   3.93   3.913625  23978700\n",
              "...          ...   ...   ...    ...        ...       ...\n",
              "2021-12-27  6.28  6.35  6.24   6.34   6.313583  15681700\n",
              "2021-12-28  6.37  6.40  6.28   6.30   6.273750  12315300\n",
              "2021-12-29  6.28  6.31  6.26   6.29   6.263792   9834900\n",
              "2021-12-30  6.29  6.32  6.26   6.26   6.233917  12171400\n",
              "2021-12-31  6.25  6.27  6.16   6.22   6.194083  10957100\n",
              "\n",
              "[252 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-58584ff0-6088-4d56-95c7-26d9b4366d52\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2021-01-04</th>\n",
              "      <td>3.99</td>\n",
              "      <td>3.99</td>\n",
              "      <td>3.85</td>\n",
              "      <td>3.89</td>\n",
              "      <td>3.873792</td>\n",
              "      <td>30281400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-01-05</th>\n",
              "      <td>3.99</td>\n",
              "      <td>4.06</td>\n",
              "      <td>3.95</td>\n",
              "      <td>4.04</td>\n",
              "      <td>4.023167</td>\n",
              "      <td>38446200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-01-06</th>\n",
              "      <td>4.01</td>\n",
              "      <td>4.09</td>\n",
              "      <td>4.01</td>\n",
              "      <td>4.04</td>\n",
              "      <td>4.023167</td>\n",
              "      <td>37467400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-01-07</th>\n",
              "      <td>4.01</td>\n",
              "      <td>4.03</td>\n",
              "      <td>3.97</td>\n",
              "      <td>3.99</td>\n",
              "      <td>3.973375</td>\n",
              "      <td>25318000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-01-08</th>\n",
              "      <td>3.94</td>\n",
              "      <td>3.96</td>\n",
              "      <td>3.90</td>\n",
              "      <td>3.93</td>\n",
              "      <td>3.913625</td>\n",
              "      <td>23978700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-27</th>\n",
              "      <td>6.28</td>\n",
              "      <td>6.35</td>\n",
              "      <td>6.24</td>\n",
              "      <td>6.34</td>\n",
              "      <td>6.313583</td>\n",
              "      <td>15681700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-28</th>\n",
              "      <td>6.37</td>\n",
              "      <td>6.40</td>\n",
              "      <td>6.28</td>\n",
              "      <td>6.30</td>\n",
              "      <td>6.273750</td>\n",
              "      <td>12315300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-29</th>\n",
              "      <td>6.28</td>\n",
              "      <td>6.31</td>\n",
              "      <td>6.26</td>\n",
              "      <td>6.29</td>\n",
              "      <td>6.263792</td>\n",
              "      <td>9834900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-30</th>\n",
              "      <td>6.29</td>\n",
              "      <td>6.32</td>\n",
              "      <td>6.26</td>\n",
              "      <td>6.26</td>\n",
              "      <td>6.233917</td>\n",
              "      <td>12171400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-31</th>\n",
              "      <td>6.25</td>\n",
              "      <td>6.27</td>\n",
              "      <td>6.16</td>\n",
              "      <td>6.22</td>\n",
              "      <td>6.194083</td>\n",
              "      <td>10957100</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>252 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58584ff0-6088-4d56-95c7-26d9b4366d52')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-58584ff0-6088-4d56-95c7-26d9b4366d52 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-58584ff0-6088-4d56-95c7-26d9b4366d52');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 12"
      ],
      "metadata": {
        "id": "1og4MzjrlHgn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Precio=datos['Close']\n",
        "Precio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Bhxm4zJTnZb",
        "outputId": "925ef3ff-8d55-4c32-d256-02d2a1e69e33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2021-01-04    3.89\n",
              "2021-01-05    4.04\n",
              "2021-01-06    4.04\n",
              "2021-01-07    3.99\n",
              "2021-01-08    3.93\n",
              "              ... \n",
              "2021-12-27    6.34\n",
              "2021-12-28    6.30\n",
              "2021-12-29    6.29\n",
              "2021-12-30    6.26\n",
              "2021-12-31    6.22\n",
              "Name: Close, Length: 252, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 13"
      ],
      "metadata": {
        "id": "zYe9fWetj-WH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(Precio.index, Precio.values)\n",
        "plt.ylabel('Precio')\n",
        "plt.legend(['NOK']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "95JbxwraUO5a",
        "outputId": "ab63177f-a39c-4ec2-a928-5ee160ca372c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 14"
      ],
      "metadata": {
        "id": "65IgJm5Cj52g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(Precio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YNeF5VJ6Up7q",
        "outputId": "00038702-d2a9-4b82-a8ab-5d664cbef4a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.171587291217985"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 15"
      ],
      "metadata": {
        "id": "JvquHCPulhZ3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.std(Precio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AtYRzfByV1X6",
        "outputId": "4f2520be-4eab-40af-88a2-1bd914e35b36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7823265155645822"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 16 - Getting Returns from Prices"
      ],
      "metadata": {
        "id": "79rNfJ_zWBcC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "R=Precio.pct_change()"
      ],
      "metadata": {
        "id": "wRg0IZb7WJy7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 17"
      ],
      "metadata": {
        "id": "Qmx0oasflNNn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(R, bins=40)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend(['NOK Returns']);"
      ],
      "metadata": {
        "id": "MR0yEW-CdtAm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "b4798fce-f9e5-4171-d52b-b88ea8d15dd1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 18"
      ],
      "metadata": {
        "id": "sWzfNIwijtQG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(R)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lqBmkg3Yg0KF",
        "outputId": "aa5b80e5-7216-486a-d288-8cdc6cef72e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0025883991248311362"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.std(R)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HIxnZKhZharv",
        "outputId": "24cd26a3-1c05-4375-a057-ec037aa35cfb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.038520919337810995"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 19"
      ],
      "metadata": {
        "id": "cj4BAynCjzCG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(np.random.normal(np.mean(R), np.std(R), 10000), bins=40)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend(['Normally Distributed Returns']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "C4MEEuoyhfte",
        "outputId": "0e696ae1-561a-4e97-dfc4-5baf5d6a6423"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 20 - Generating a Moving Average"
      ],
      "metadata": {
        "id": "pcrQnANDiILA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "MAVG = Precio.rolling(4).mean()\n",
        "plt.plot(Precio.index, Precio.values)\n",
        "plt.plot(MAVG.index, MAVG.values)\n",
        "plt.ylabel('Price')\n",
        "plt.legend(['NOK', '60-day MAVG']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "xLAYgmHdiTg5",
        "outputId": "d55d2805-6777-4d1d-9dc0-5603037a2ee9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "INTRODUCTION TO PYTHON"
      ],
      "metadata": {
        "id": "wOkimB65prdB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 21 - Code Comments"
      ],
      "metadata": {
        "id": "UF6fIa92p38s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Alo policía, hay un wapo en mi ksa"
      ],
      "metadata": {
        "id": "lM_ineAAqDOP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 22 "
      ],
      "metadata": {
        "id": "lSm5-pX3qVKn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"ah, no se preocupe, soy yo!\"\"\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "XRV_96YPqYA_",
        "outputId": "7b61ec18-c2aa-4c4a-aae3-71c2987cd923"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'ah, no se preocupe, soy yo!'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 23 - Variables"
      ],
      "metadata": {
        "id": "MT6Mxx1UXe56"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n=500\n",
        "print(n, type(n))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_1aMFJeVXkzg",
        "outputId": "e25a26f0-1d62-48ee-bcec-373b13082517"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "500 <class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "o=3.0\n",
        "print(o, type(o))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kOZWBeyFYP2E",
        "outputId": "0ba2c782-f6fc-4432-b920-e8deafab8861"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0 <class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "o=float(3)\n",
        "print(o,type(o))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sbbig6V1YfLS",
        "outputId": "10884564-b2ca-4ee0-f7ea-b7046a8f869b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0 <class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 24"
      ],
      "metadata": {
        "id": "mJV2BJdvZvxQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p=int(4.869)\n",
        "print(p, type(p))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b9-VS2_nYzir",
        "outputId": "6aec3dca-d3b6-4d06-f60b-2cf15cb80a63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4 <class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 25"
      ],
      "metadata": {
        "id": "bl1JR2cFZkXm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "text='qué tal?'\n",
        "print(text)\n",
        "text=\"qué tal?\"\n",
        "print(text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "diX-WD41Z9hl",
        "outputId": "a19d5550-017d-465b-91d3-0c3b0e5a86e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "qué tal?\n",
            "qué tal?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 26"
      ],
      "metadata": {
        "id": "OaBfrKFBcAef"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "texto='\"Está más cerca Talpa que Zenzontla\".'\n",
        "print(texto)\n",
        "texto=\"Entonces 'el chihuila' se levantó.\"\n",
        "print(texto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RDmO584FaSE1",
        "outputId": "d8ef5dc6-d48f-4282-acba-c68957a14410"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"Está más cerca Talpa que Zenzontla\".\n",
            "Entonces 'el chihuila' se levantó.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 27"
      ],
      "metadata": {
        "id": "7eeiNS7Qcn_J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bin= False\n",
        "print(bin, type(bin))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B4wZi-8Kb_QH",
        "outputId": "d6208884-4828-495b-d755-1c11936883b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False <class 'bool'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 38"
      ],
      "metadata": {
        "id": "8yG_HaIGdTrK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('suma: ', 3.6 + 7.01)\n",
        "print('resta: ', 4 - 6)\n",
        "print('multiplicacion: ', 3 * 9)\n",
        "print('division: ', 104 / 5)\n",
        "print('Exponenciacion: ', 7**10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IQFd6WORchu0",
        "outputId": "c6018300-46c7-4fc9-a41f-07069cccac87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "suma:  10.61\n",
            "resta:  -2\n",
            "multiplicacion:  27\n",
            "division:  20.8\n",
            "Exponenciacion:  282475249\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 29"
      ],
      "metadata": {
        "id": "i1V3S39SdoQp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Residuo: ', 43 % 5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cg5Cvo96dSG2",
        "outputId": "a8b93feb-3708-4bc6-931f-9d073a0cb43e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Residuo:  3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 30"
      ],
      "metadata": {
        "id": "HM5jHVh9e9gm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prim = 4\n",
        "seg = 5\n",
        "print(prim/(prim + seg))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oMXDO4wEeceX",
        "outputId": "564521fa-6d75-487a-eff4-2303fbe1fc74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.4444444444444444\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 31"
      ],
      "metadata": {
        "id": "p6m-qhcEgN-4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 4\n",
        "b = 5\n",
        "print(a*(b+1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DMBGhMPye6hD",
        "outputId": "298c1934-52f4-4358-d175-5d539bdee718"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 4.0\n",
        "b = 5.0\n",
        "print(a*(b+1.0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hgsW1njNgGtB",
        "outputId": "4a3f2fd7-b5b8-4e76-f691-9ebc8cce9e4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 32"
      ],
      "metadata": {
        "id": "lxdRpd9Bgrs4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "math.sqrt(16)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rI3oPHjAgMaO",
        "outputId": "0f9cf6cc-4edc-44b4-c9c3-f02c50f10b34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.0"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "seno=math.sin(90)\n",
        "print(seno)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "86XOgHvChEQd",
        "outputId": "fe2dd3a5-dd31-4e47-c9c0-a11c04c02261"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8939966636005579\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 33"
      ],
      "metadata": {
        "id": "-WmTbC5EhAVr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista=[5,8,9]\n",
        "print(lista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Or5pYHBzgqOS",
        "outputId": "f0b03abf-a00a-470f-c9b2-c00b98fe7ba1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 8, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(lista[0])\n",
        "print(lista[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fiYComXRg8nd",
        "outputId": "529699cb-9660-450d-9938-0993866af29c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 34"
      ],
      "metadata": {
        "id": "573IdJwFiqek"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(lista))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EMzfl30ohqx5",
        "outputId": "f23635b2-790a-43d8-e76e-bf7bfb8063c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(lista)\n",
        "lista[1]=60\n",
        "print(lista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LONwHUcmh3iP",
        "outputId": "3cb53291-006b-4a7f-9fb1-edba6498a46e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 8, 9]\n",
            "[5, 60, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 35"
      ],
      "metadata": {
        "id": "nyVnDidpjitv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista1= [2,'kk']\n",
        "lista2=[3,'ww',8.6]\n",
        "listota=lista1 + lista2\n",
        "print(listota)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PiXG0v5Ai5ZG",
        "outputId": "1a4eb471-3d4c-493f-90fc-4013b7856517"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 'kk', 3, 'ww', 8.6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(listota[1:4])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6nGOLhdcjdqU",
        "outputId": "7ca03b0b-6188-461c-94b2-207250dbcdf5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['kk', 3, 'ww']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 36"
      ],
      "metadata": {
        "id": "0o4NY-Djlhc_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(listota[:3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PWYpWphjj9_Z",
        "outputId": "68125a72-a3c9-42a4-e799-c24ed33fea8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 'kk', 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(listota[::3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D7EDwZO3khSi",
        "outputId": "c260848f-3ad0-4232-d541-89ea2342fdd6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 'ww']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(listota[::-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K03Ir3rRk0b6",
        "outputId": "a6eb57d8-32c5-4208-e3ab-87e51de2616d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[8.6, 'ww', 3, 'kk', 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 37"
      ],
      "metadata": {
        "id": "3_IJxvMwvYcS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = range(6)\n",
        "\n",
        "for n in x:\n",
        "  print(n)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p_awMAnXlfgw",
        "outputId": "583c37e8-6663-48f9-dfa8-f9b9cbda3736"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tupla = ('a', 'e', 'i', 'o','u')\n",
        "print(tupla)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q4mAjQp4rCcY",
        "outputId": "5d7c6e4f-27fc-42eb-9d8b-71b370a68340"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('a', 'e', 'i', 'o', 'u')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "My own example 38"
      ],
      "metadata": {
        "id": "Lr5heavny4pW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(tupla[0:2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jf7LiErBxMWa",
        "outputId": "2f0a21e9-7d93-4bb1-d21e-c931ed28f3b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('a', 'e')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str_1, str_2, str_3, str_4, str_5=tupla\n",
        "print(str_2, str_1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tmWPT2agxVnx",
        "outputId": "d956fd20-aef1-4adb-87bd-1b4292084f89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "e a\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "Y-4pSUIdx_TV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}